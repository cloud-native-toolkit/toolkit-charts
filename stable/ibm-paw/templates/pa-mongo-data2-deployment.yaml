apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.common.appName }}
    app.kubernetes.io/name: {{ .Values.common.appName }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    name: mongo-data2{{ .Values.instanceIdWithinNamespace }}
    release: {{ .Release.Name }}
  name: mongo-data2{{ .Values.instanceIdWithinNamespace }}
  annotations:
    argocd.argoproj.io/sync-wave: â€œ300"
spec:
  replicas: 1
  selector:
    matchLabels:
      name: mongo-data2{{ .Values.instanceIdWithinNamespace }}
  template:
    metadata:
      annotations:
        hook.activate.cpd.ibm.com/command: '[]'
        hook.deactivate.cpd.ibm.com/command: '[]'
        productName: IBM Planning Analytics Workspace
        productID: com.ibm.ba.paw.{{ .Release.Name }}
        productVersion: {{ .Release.Name }}
      labels:
        app: {{ .Values.common.appName }}
        app.kubernetes.io/name: {{ .Values.common.appName }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        name: mongo-data2{{ .Values.instanceIdWithinNamespace }}
        release: {{ .Release.Name }}
        version: "1.0.172-ubi8"
        pa-cacerts-version: {{ .Values.secrets.cacertVersion }}
        pa-tls-version: {{ .Values.secrets.tlsCertVersion }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.arch }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: name
                  operator: In
                  values:
                  - mongo-data1
                  - mongo-data3
              topologyKey: kubernetes.io/hostname
      volumes:
        - name: mongo-data2-storage
          persistentVolumeClaim:
            claimName: mongo-data2{{ .Values.instanceIdWithinNamespace }}
        - name: pa-temp
          emptyDir:
            medium: "{{ .Values.mongo.emptyDirMedium }}"
            sizeLimit: "{{ .Values.mongo.emptyDirSizeLimit }}"
        - name: pa-cacerts
          emptyDir:
            medium: {{ .Values.secrets.tlsEmptyDirMedium }}
            sizeLimit: {{ .Values.secrets.tlsEmptyDirSizeLimit }}
        - name: pa-tls-cacerts
          secret:
            secretName: pa-tls-cacerts{{ .Values.instanceIdWithinNamespace }}
        - name: pa-tls-cert
          secret:
            secretName: {{ .Values.secrets.tlsCertSecretName }}{{ .Values.instanceIdWithinNamespace }}
      initContainers:
        - name: prepare-cacerts
          image: {{ .Values.docker_registry_prefix }}/k8s-config:1.0.103-ubi8
          command: ["/bin/bash"]
          args: ["-c", "/opt/harmony/start.sh capem"]
          env:
           - name: PA_KUBE_TM1_CA_CERTS
             value: /run/secrets/paw/tls-cacerts/cacerts.pem
           - name: PA_KUBE_TLS_CA_CERT
             value: /run/secrets/paw/tls-cert/{{ .Values.secrets.tlsCaCertName }}
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - name: pa-cacerts
            mountPath: /run/config
          - name: pa-tls-cacerts
            mountPath: /run/secrets/paw/tls-cacerts
          - name: pa-tls-cert
            mountPath: /run/secrets/paw/tls-cert
      containers:
        - name: wait-for-pods
          image: {{ .Values.docker_registry_prefix }}/mongo:1.0.172-ubi8
          command: ["/bin/bash"]
          args: ["-c", "/tmp/wait-for-pods.sh"]
          ports:
            - containerPort: 31000
              protocol: TCP
          env:
            - name: READINESS_PORT
              value: "31000"
            - name: READINESS_ROOT
              value: "/run/pa-temp"
            - name: SERVICENAMES
              value: "mongo1{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }} mongo2{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }} mongo3{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }}"
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: pa-temp
              mountPath: /run/pa-temp
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: mongo-data2
          image: {{ .Values.docker_registry_prefix }}/mongo:1.0.172-ubi8
          command: ["/bin/bash"]
          args: ["-c", "exec /paw-entrypoint.sh mongod {{ .Values.mongo.options }} --replSet rs0"]
          ports:
            - containerPort: 27017
              protocol: TCP
          env:
            - name: ENABLE_SSL
              value: "true"
            - name: SERVICENAMES
              value: "mongo1{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }} mongo2{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }} mongo3{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }}"
            - name: SSL_CA_BUNDLE_FILE
              value: "/run/config/cacerts.pem"
            - name: SSL_CERTIFICATE_KEY_FILE
              value: "/run/secrets/paw/tls-cert/tls.key"
            - name: SSL_CERTIFICATE_CHAIN_FILE
              value: "/run/secrets/paw/tls-cert/tls.crt"
            - name: WAIT_FOR_PODS_MARKER_FILE
              value: "/run/pa-temp/true"
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: mongo-data2-storage
              mountPath: /data/db
              subPath: mongo-data2.1
            - name: pa-cacerts
              mountPath: /run/config              
            - name: pa-tls-cert
              mountPath: /run/secrets/paw/tls-cert              
            - name: pa-temp
              mountPath: /run/pa-temp
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      hostNetwork: false
      hostIPC: false
      hostPID: false
      restartPolicy: Always
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      schedulerName: {{ .Values.persistence.podScheduler }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1

