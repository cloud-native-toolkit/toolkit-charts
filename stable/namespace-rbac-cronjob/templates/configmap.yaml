apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "console-link-cronjob.fullname" . }}
  labels:
  {{- include "console-link-cronjob.labels" . | nindent 4 }}
data:
  reconcile-namespace-rbac.sh: |
    #!/bin/bash

    SCRIPT_DIR=$(cd $(dirname $0); pwd -P)

    if [[ -z "${TARGET_LABEL}" ]] || [[ -z "${TARGET_SERVICE_ACCOUNT}" ]] || [[ -z "${TARGET_NAMESPACE}" ]] || [[ -z "${NAME}" ]]; then
      echo "TARGET_LABEL, TARGET_SERVICE_ACCOUNT, TARGET_NAMESPACE and NAME are required"
      exit 1
    fi

    RESOURCES=$(kubectl get namespace -l "${TARGET_LABEL}=true" -o yaml | yq eval -j '.' - | jq -c '.items[] | del(.metadata.annotations["kubectl.kubernetes.io/last-applied-configuration"])')

    if [[ -z "${RESOURCES}" ]]; then
      echo "No namespaces found with '${TARGET_LABEL}=true' label"
      exit 0
    fi

    # for each resource create/update a console link
    echo "${RESOURCES}" | while read -r resource; do
      namespace="$(echo "${resource}" | jq -r '.metadata.name')"
      if [[ -z "${namespace}" ]]; then
        echo "Error parsing resource: ${resource}"
        continue
      fi

      echo "Creating/updating role: ${namespace}/${NAME}"
      cat "${SCRIPT_DIR}/../config/default-role.yaml" | \
        yq eval '.metadata.name = env(NAME)' - | \
        kubectl apply -n "${namespace}" -f -

      cat > /tmp/rolebinding.yaml <<EOL
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: ${NAME}
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: ${NAME}
    subjects:
    - kind: ServiceAccount
      name: ${TARGET_SERVICE_ACCOUNT}
      namespace: ${TARGET_NAMESPACE}
    EOL

      echo "Creating/updating role binding: ${namespace}/${NAME}"
      kubectl apply -n "${namespace}" -f /tmp/rolebinding.yaml
    done
